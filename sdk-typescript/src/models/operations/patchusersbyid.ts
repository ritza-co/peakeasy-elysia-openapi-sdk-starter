/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchUsersByIdRequestBody = {
  name?: string | undefined;
  age?: number | undefined;
};

export type PatchUsersByIdRequest = {
  id: string;
  requestBody: PatchUsersByIdRequestBody;
};

/** @internal */
export const PatchUsersByIdRequestBody$inboundSchema: z.ZodType<
  PatchUsersByIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  age: z.number().optional(),
});

/** @internal */
export type PatchUsersByIdRequestBody$Outbound = {
  name?: string | undefined;
  age?: number | undefined;
};

/** @internal */
export const PatchUsersByIdRequestBody$outboundSchema: z.ZodType<
  PatchUsersByIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchUsersByIdRequestBody
> = z.object({
  name: z.string().optional(),
  age: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchUsersByIdRequestBody$ {
  /** @deprecated use `PatchUsersByIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchUsersByIdRequestBody$inboundSchema;
  /** @deprecated use `PatchUsersByIdRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchUsersByIdRequestBody$outboundSchema;
  /** @deprecated use `PatchUsersByIdRequestBody$Outbound` instead. */
  export type Outbound = PatchUsersByIdRequestBody$Outbound;
}

export function patchUsersByIdRequestBodyToJSON(
  patchUsersByIdRequestBody: PatchUsersByIdRequestBody,
): string {
  return JSON.stringify(
    PatchUsersByIdRequestBody$outboundSchema.parse(patchUsersByIdRequestBody),
  );
}

export function patchUsersByIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchUsersByIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchUsersByIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchUsersByIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchUsersByIdRequest$inboundSchema: z.ZodType<
  PatchUsersByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => PatchUsersByIdRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchUsersByIdRequest$Outbound = {
  id: string;
  RequestBody: PatchUsersByIdRequestBody$Outbound;
};

/** @internal */
export const PatchUsersByIdRequest$outboundSchema: z.ZodType<
  PatchUsersByIdRequest$Outbound,
  z.ZodTypeDef,
  PatchUsersByIdRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => PatchUsersByIdRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchUsersByIdRequest$ {
  /** @deprecated use `PatchUsersByIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchUsersByIdRequest$inboundSchema;
  /** @deprecated use `PatchUsersByIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchUsersByIdRequest$outboundSchema;
  /** @deprecated use `PatchUsersByIdRequest$Outbound` instead. */
  export type Outbound = PatchUsersByIdRequest$Outbound;
}

export function patchUsersByIdRequestToJSON(
  patchUsersByIdRequest: PatchUsersByIdRequest,
): string {
  return JSON.stringify(
    PatchUsersByIdRequest$outboundSchema.parse(patchUsersByIdRequest),
  );
}

export function patchUsersByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchUsersByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchUsersByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchUsersByIdRequest' from JSON`,
  );
}
