/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Id = {
  id: string;
};

/** @internal */
export const Id$inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown> = z.object({
  id: z.string(),
});

/** @internal */
export type Id$Outbound = {
  id: string;
};

/** @internal */
export const Id$outboundSchema: z.ZodType<Id$Outbound, z.ZodTypeDef, Id> = z
  .object({
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Id$ {
  /** @deprecated use `Id$inboundSchema` instead. */
  export const inboundSchema = Id$inboundSchema;
  /** @deprecated use `Id$outboundSchema` instead. */
  export const outboundSchema = Id$outboundSchema;
  /** @deprecated use `Id$Outbound` instead. */
  export type Outbound = Id$Outbound;
}

export function idToJSON(id: Id): string {
  return JSON.stringify(Id$outboundSchema.parse(id));
}

export function idFromJSON(
  jsonString: string,
): SafeParseResult<Id, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Id$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Id' from JSON`,
  );
}
