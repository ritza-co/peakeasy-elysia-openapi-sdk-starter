/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersDeleteUsersById } from "../funcs/usersDeleteUsersById.js";
import { usersGetUsers } from "../funcs/usersGetUsers.js";
import { usersGetUsersById } from "../funcs/usersGetUsersById.js";
import { usersPatchUsersById } from "../funcs/usersPatchUsersById.js";
import { usersPostUsers } from "../funcs/usersPostUsers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Users extends ClientSDK {
  /**
   * Get all users
   *
   * @remarks
   * Get all users from the database
   */
  async getUsers(
    options?: RequestOptions,
  ): Promise<Array<components.User>> {
    return unwrapAsync(usersGetUsers(
      this,
      options,
    ));
  }

  /**
   * Create user
   *
   * @remarks
   * Add user to the database
   */
  async postUsers(
    request: operations.PostUsersRequestBody,
    options?: RequestOptions,
  ): Promise<components.Id> {
    return unwrapAsync(usersPostUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Get user
   *
   * @remarks
   * Get user by id from the database
   */
  async getUsersById(
    request: operations.GetUsersByIdRequest,
    options?: RequestOptions,
  ): Promise<components.User> {
    return unwrapAsync(usersGetUsersById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete user
   *
   * @remarks
   * Delete user by id from the database
   */
  async deleteUsersById(
    request: operations.DeleteUsersByIdRequest,
    options?: RequestOptions,
  ): Promise<components.SuccessResponse> {
    return unwrapAsync(usersDeleteUsersById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * Update user by id from the database
   */
  async patchUsersById(
    request: operations.PatchUsersByIdRequest,
    options?: RequestOptions,
  ): Promise<components.SuccessResponse> {
    return unwrapAsync(usersPatchUsersById(
      this,
      request,
      options,
    ));
  }
}
